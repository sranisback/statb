security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
<<<<<<< ours
        db_users:
            entity:
                class: App\Entity\Coaches
                property: name
=======
        users_in_memory: { memory: null }
>>>>>>> theirs
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
<<<<<<< ours
            provider: db_users
=======
            lazy: true
            provider: users_in_memory

>>>>>>> theirs
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

<<<<<<< ours
            #http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            form_login: 
                login_path: login
                check_path: login
            # https://symfony.com/doc/current/security/form_login_setup.html
            
            logout:
                path:   /logout
                target: /
=======
            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
>>>>>>> theirs

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
<<<<<<< ours
         #- { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
=======
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
>>>>>>> theirs
